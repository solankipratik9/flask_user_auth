services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped

  backend:
    image: flask-production-app:latest
    build:
      context: ./backend
    env_file:
    - ./backend/.env
    entrypoint: /app/scripts/entrypoint.sh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    restart: unless-stopped

  celery:
    image: flask-production-app:latest
    command: celery -A app.celery_app.celery worker --loglevel=info --concurrency=2
    environment:
      - CONFIG_NAME=${CONFIG_NAME}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    restart: unless-stopped

  celery-beat:
    image: flask-production-app:latest
    environment:
      - CONFIG_NAME=${CONFIG_NAME}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - postgres
      - redis
    command: >
      celery -A app.celery_app.celery beat
      --loglevel=info
      --schedule /app/celery/celerybeat-schedule.db
    volumes:
      - celery_beat_schedule:/app/celery
    restart: unless-stopped

  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl  # For SSL certificates
      - ./nginx/proxy_params:/etc/nginx/proxy_params
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  celery_beat_schedule:
